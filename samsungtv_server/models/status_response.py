# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from samsungtv_server.models.base_model_ import Model
from samsungtv_server import util


class StatusResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, host: str=None, reachable: bool=None, tv_response: str=None):  # noqa: E501
        """StatusResponse - a model defined in Swagger

        :param host: The host of this StatusResponse.  # noqa: E501
        :type host: str
        :param reachable: The reachable of this StatusResponse.  # noqa: E501
        :type reachable: bool
        :param tv_response: The tv_response of this StatusResponse.  # noqa: E501
        :type tv_response: str
        """
        self.swagger_types = {
            'host': str,
            'reachable': bool,
            'tv_response': str
        }

        self.attribute_map = {
            'host': 'host',
            'reachable': 'reachable',
            'tv_response': 'tvResponse'
        }
        self._host = host
        self._reachable = reachable
        self._tv_response = tv_response

    @classmethod
    def from_dict(cls, dikt) -> 'StatusResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StatusResponse of this StatusResponse.  # noqa: E501
        :rtype: StatusResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host(self) -> str:
        """Gets the host of this StatusResponse.

        host name or IP address of the TV  # noqa: E501

        :return: The host of this StatusResponse.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host: str):
        """Sets the host of this StatusResponse.

        host name or IP address of the TV  # noqa: E501

        :param host: The host of this StatusResponse.
        :type host: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def reachable(self) -> bool:
        """Gets the reachable of this StatusResponse.

        if the TV is reachable  # noqa: E501

        :return: The reachable of this StatusResponse.
        :rtype: bool
        """
        return self._reachable

    @reachable.setter
    def reachable(self, reachable: bool):
        """Sets the reachable of this StatusResponse.

        if the TV is reachable  # noqa: E501

        :param reachable: The reachable of this StatusResponse.
        :type reachable: bool
        """
        if reachable is None:
            raise ValueError("Invalid value for `reachable`, must not be `None`")  # noqa: E501

        self._reachable = reachable

    @property
    def tv_response(self) -> str:
        """Gets the tv_response of this StatusResponse.

        the status response from the TV  # noqa: E501

        :return: The tv_response of this StatusResponse.
        :rtype: str
        """
        return self._tv_response

    @tv_response.setter
    def tv_response(self, tv_response: str):
        """Sets the tv_response of this StatusResponse.

        the status response from the TV  # noqa: E501

        :param tv_response: The tv_response of this StatusResponse.
        :type tv_response: str
        """

        self._tv_response = tv_response
